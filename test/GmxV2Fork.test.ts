import { ethers, network } from "hardhat"
import { expect } from "chai"
import { createContract, toWei, toUnit } from "../scripts/deployUtils"
import { impersonateAccount, setBalance } from "@nomicfoundation/hardhat-network-helpers"

import { SignerWithAddress } from "@nomiclabs/hardhat-ethers/signers"
import { encodeRealtimeData } from "./GmxV2Utils"

const U = ethers.utils
const B = ethers.BigNumber

describe("Simulate", async () => {
  const PROJECT_ID = 2

  let user0: SignerWithAddress
  let user1: SignerWithAddress
  let user2: SignerWithAddress
  let user3: SignerWithAddress
  let user4: SignerWithAddress

  beforeEach(async () => {
    const accounts = await ethers.getSigners()
    user0 = accounts[0]
    user1 = accounts[1]
    user2 = accounts[2]
    user3 = accounts[3]
    user4 = accounts[4]
  })

  it("Debug", async () => {
    await network.provider.request({
      method: "hardhat_reset",
      params: [
        {
          forking: {
            jsonRpcUrl: "https://arb1.arbitrum.io/rpc",
            enabled: true,
            ignoreUnknownTxType: true, // added in our hardhat patch. see README.md
            // blockNumber: 157110048,
            blockNumber: 157131108,
          },
        },
      ],
    })

    // const user = await ethers.getImpersonatedSigner("0xe22289fC90d684b704c89D2ef0416bE2dcb509a4")
    // const calldata =
    //   "0xac9650d8000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000a4b8444d8200000000000000000000000000000000000000000000000000000000000000020000000000000000000000002f2a2543b76a4166549f7aab2e75bef0aefc5b0f00000000000000000000000047c031236e19d024b42f8ae6780e44a57317070300000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000004be2ce8c670000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002c423932363000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000020000000000000000000000002f2a2543b76a4166549f7aab2e75bef0aefc5b0f00000000000000000000000047c031236e19d024b42f8ae6780e44a57317070300000000000000000000000000000000000000000000000000000000000000016d757870726f746f636f6c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001845102a70800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007e0d9981ee01bca7bf2d8afd500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001595f7af94914ab8e395f980000000000000000000000000000000000000000000000000004be2ce8c67000000000000000000000000000000000000000000000000000000000000007a120000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"

    const admin = await ethers.getImpersonatedSigner("0xc2D28778447B1B0B2Ae3aD17dC6616b546FBBeBb")
    setBalance(admin.address, toWei("2"))
    const proxyAdmin = await ethers.getContractAt("ProxyAdmin", "0xE52d9a3CBA458832A65cfa9FC8a74bacAbdeB32A")
    // await setBalance(admin.address, toWei("2"))
    // const adapter = await createContract("GmxV2Adapter", [], {
    //   LibGmxV2: await createContract("LibGmxV2", [], {}),
    // })
    // // 2 update proxy
    const proxyFactory = await ethers.getContractAt("ProxyFactory", "0x2ff2f1D9826ae2410979ae19B88c361073Ab0918")
    // await proxyFactory.connect(admin).upgradeTo(2, adapter.address)
    console.log(await proxyFactory.getProjectConfig(1))

    await proxyAdmin.connect(admin).upgrade(proxyFactory.address, "0x0523467DaEed5Df174E178FEE3C1777784cd4fBf")

    console.log(await proxyFactory.getProjectConfig(1))

    // const gmxReader = await ethers.getContractAt("IReader", "0xf60becbba223EEA9495Da3f606753867eC10d139")
    // console.log(
    //   await gmxReader.getPositionInfo(
    //     "0xFD70de6b91282D8017aA4E741e9Ae325CAb992d8",
    //     "0xe6fab3F0c7199b0d34d7FbE83394fc0e0D06e99d",
    //     "0x087bd244982050a63b2068151c7ee926297ccb841f0018fef435242f2ad447d4",
    //     {
    //       indexTokenPrice: {
    //         max: "417936300000000000000000000",
    //         min: "417936300000000000000000000",
    //       },
    //       longTokenPrice: {
    //         max: "417936300000000000000000000",
    //         min: "417936300000000000000000000",
    //       },
    //       shortTokenPrice: {
    //         max: "1000000000000000000000000",
    //         min: "1000000000000000000000000",
    //       },
    //     },
    //     0,
    //     ethers.constants.AddressZero,
    //     true
    //   )
    // )

    // await expect(
    //   user.sendTransaction({
    //     to: "0x247100545432D3B88a70606fc54D918747774b20",
    //     value: toWei("0.2"),
    //     data: calldata,
    //   })
    // ).to.be.revertedWith("MarginUnsafe")
  })
})
